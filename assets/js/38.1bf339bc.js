(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{623:function(s,n,a){"use strict";a.r(n);var e=a(5),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"ts-类型检测"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ts-类型检测"}},[s._v("#")]),s._v(" TS（类型检测）")]),s._v(" "),a("h2",{attrs:{id:"基本类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本类型"}},[s._v("#")]),s._v(" 基本类型")]),s._v(" "),a("h3",{attrs:{id:"any类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#any类型"}},[s._v("#")]),s._v(" any类型")]),s._v(" "),a("ul",[a("li",[s._v("可以给一个any类型的变量赋值任何类型的值")])]),s._v(" "),a("h3",{attrs:{id:"unkown"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unkown"}},[s._v("#")]),s._v(" unkown")]),s._v(" "),a("ul",[a("li",[s._v("用于描述不确定的变量"),a("img",{attrs:{src:"E:%5C%E7%AC%94%E8%AE%B0%5C%E6%88%AA%E5%9B%BE%5CSnipaste_2021-10-11_16-27-29.png",alt:"Snipaste_2021-10-11_16-27-29"}})])]),s._v(" "),a("h3",{attrs:{id:"void类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#void类型"}},[s._v("#")]),s._v(" void类型")]),s._v(" "),a("ul",[a("li",[s._v("通常指定一个函数是没有返回值的，那么它的返回值就是void类型\n"),a("ul",[a("li",[s._v("可以讲null和undefined赋值给void类型")])])])]),s._v(" "),a("h3",{attrs:{id:"never类型-通常会应用在联合类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#never类型-通常会应用在联合类型"}},[s._v("#")]),s._v(" never类型（通常会应用在联合类型）")]),s._v(" "),a("h3",{attrs:{id:"tuple元组类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tuple元组类型"}},[s._v("#")]),s._v(" tuple元组类型")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("与数组的区别在于，数组中存放的值通常是一个类型的，而元组中的数据可以是不同类型")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const Iinfo:[string,number] = ['zhangsan',18]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("​")])])]),s._v(" "),a("h2",{attrs:{id:"函数的参数类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数的参数类型"}},[s._v("#")]),s._v(" 函数的参数类型")]),s._v(" "),a("p",[s._v("在ts中，允许我们指定函数的参数和返回值的类型")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function foo(name:string):void ={\n  /.../\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("通常情况下，函数的返回值类型不需要类型注解，因为ts会根据return返回值推断函数返回类型")]),s._v(" "),a("h2",{attrs:{id:"对象类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象类型"}},[s._v("#")]),s._v(" 对象类型")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("如果函数参数是一个对象，想要限定参数类型，可以使用对象类型")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function foo(point：｛x:number,y:number｝) ={\n  /.../\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ul",[a("li",[s._v("在对象中我们可以添加属性，并且告知该属性需要的是什么类型")]),s._v(" "),a("li",[s._v("每个属性的类型是可选的，如果不指定，那就是any类型")])])])]),s._v(" "),a("h3",{attrs:{id:"可选类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可选类型"}},[s._v("#")]),s._v(" 可选类型")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("对象类型可以指定哪些属性是可选的，在属性后面添加一个？：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function foo(point：｛x:number,y:number，z?:number｝) ={\n  /.../\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"联合类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联合类型"}},[s._v("#")]),s._v(" 联合类型")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("指定一个属性可以是多个类型的集合，属于从现有类型中构建新的类型")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function foo(id:number|string){\n  /.../\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("可选类型表示，可以是这些类型中的任何一个类型")])]),s._v(" "),a("li",[a("h4",{attrs:{id:"使用联合类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用联合类型"}},[s._v("#")]),s._v(" 使用联合类型")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("每种类型中的方法是不一样的，如果不能确定类型，那么就没有办法使用对应的方法，这个时候需要缩小联合")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("方式一")]),s._v(" "),a("p",[s._v("使用if语句判断")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function foo(id:number|string){\n  if(typeof id === 'string'){\n    consle.log(id.length)\n  }esle{\n    consle.log(id)\n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])])])])])])]),s._v(" "),a("h2",{attrs:{id:"类型别名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型别名"}},[s._v("#")]),s._v(" 类型别名")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("如果想要多次在其他地方使用对象类型和联合类型，这个时候可以给对象类型起一个别名，类似于封装函数，使用关键字：tpye")]),s._v(" "),a("ul",[a("li",[a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("tpye Point = ｛\nx:number\ny:number\nz?:number\n｝\nfunction foo(point：Point) ={\n  /.../\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("​")])])])])]),s._v(" "),a("h2",{attrs:{id:"可选链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可选链"}},[s._v("#")]),s._v(" 可选链")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("可以理解为可选类型的嵌套，作用是当对象的属性不存在的时候，直接返回undefined，如果存在，才会继续执行")]),s._v(" "),a("ul",[a("li",[a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type Person ={\n  name:string\n  friend?:{\t\t\n    name:string\n    age:number\n    girlFriend?:{\n      name:string\n    }\n  }\n}\n\nconst info:Person = {\n  name:'zhangsna'\n  friend:{\n    name:'lisi'\n    age:18\n  }\n}\n\nconsle.log(info.name)  //打印zhangsan\nconsle.log(info.friend.name)  //会判断是否有friend属性，如果有继续执行  打印lisi\nconsle.log(info.friend.girFriend) //判断是否有girFriend属性，打印undefined\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("p",[s._v("​")])])])])]),s._v(" "),a("h2",{attrs:{id:"和-的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#和-的作用"}},[s._v("#")]),s._v(" ？？和！！的作用")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("！！将一个其他类型转换成布尔类型")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const id = ''\n\nlet flag = !!id  //第一个！是取反，id没有值，所以返回ture，然后再取反，返回false  flag值为false\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("​")])])]),s._v(" "),a("h2",{attrs:{id:"字面量类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字面量类型"}},[s._v("#")]),s._v(" 字面量类型")]),s._v(" "),a("h3",{attrs:{id:"类型缩小"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型缩小"}},[s._v("#")]),s._v(" 类型缩小")]),s._v(" "),a("ul",[a("li",[s._v("我们可以通过类似于typeof padding ===“number” 的判断语句，来改变ts的执行路径")]),s._v(" "),a("li",[s._v("在给定的执行路径中，我们可以缩小比声明时更小的类型")]),s._v(" "),a("li",[s._v("typeof padding ===“number” 称之为类型保护")]),s._v(" "),a("li",[s._v("常见的类型保护\n"),a("ul",[a("li",[s._v("typeof")]),s._v(" "),a("li",[s._v("平等缩小（比如===  ，！==）")]),s._v(" "),a("li",[s._v("instaceof")]),s._v(" "),a("li",[s._v("in")])])])]),s._v(" "),a("h4",{attrs:{id:"instaceof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instaceof"}},[s._v("#")]),s._v(" instaceof")]),s._v(" "),a("p",[s._v("​\t用来检查一个值是否是另一个值的实例")]),s._v(" "),a("h4",{attrs:{id:"in"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#in"}},[s._v("#")]),s._v(" in")]),s._v(" "),a("p",[s._v("​\t如果指定的属性在指定的对象或其原型链中，则in运算符返回true")]),s._v(" "),a("h2",{attrs:{id:"函数类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数类型"}},[s._v("#")]),s._v(" 函数类型")]),s._v(" "),a("p",[s._v("在js中，函数是一等公民，可以作为参数传递，也可以作为返回值进行传递")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("函数类型表达式")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type FooFnType = () => void\nfunction bar(fn: FooFnType) { //表示传递的参数是函数类型\n  fn()\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function calc(n1: number, n2: number, fn: (num1: number, num2: number) => number) {\n  return fn(n1, n2)\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("fn: (num1: number, num2: number) => number 表示传递进来的第三个参数是一个函数类型的参数，且参数为number类型，返回值为number类型")])])]),s._v(" "),a("h3",{attrs:{id:"函数参数的可选类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数参数的可选类型"}},[s._v("#")]),s._v(" 函数参数的可选类型")]),s._v(" "),a("p",[s._v("与对象类型中的可选类型相似，只需要在参数后面加个？，表示该参数可传可不传")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function foo:（n1:number,n2?:number）=> void {\n  /.../\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("可选参数要在必传参数后面")]),s._v(" "),a("h3",{attrs:{id:"默认参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#默认参数"}},[s._v("#")]),s._v(" 默认参数")]),s._v(" "),a("p",[s._v("使用默认参数的时候，默认参数其实是undefined和定义的类型的联合")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function foo:（n1:number,n2:number = 6）=> void {\n  /.../\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"剩余参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#剩余参数"}},[s._v("#")]),s._v(" 剩余参数")]),s._v(" "),a("p",[s._v("讲一个不定数量的参数放到一个数组中,根据使用者传入的参数决定函数有几个参数")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//计算所有参数的和\nfunction sum(initalNum: number, ...nums: number[]) {\n  let total = initalNum\n  for (const num of nums) {\n    total += num\n  }\n  return total\n}\n\nconsole.log(sum(20, 30))        //50\nconsole.log(sum(20, 30, 40))    //90\nconsole.log(sum(20, 30, 40, 50)) //140\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h3",{attrs:{id:"函数的重载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数的重载"}},[s._v("#")]),s._v(" 函数的重载")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("主要是为了解决参数类型不同的函数复用")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function add(num1: number, num2: number): number; // 没函数体\nfunction add(num1: string, num2: string): string;\n\nfunction add(num1: any, num2: any): any {\n  if (typeof num1 === 'string' && typeof num2 === \t'string') {\n    return num1.length + num2.length\n  }\n  return num1 + num2\n}\n\nconst result = add(20, 30)\nconst result2 = add(\"abc\", \"cba\")\nconsole.log(result)\nconsole.log(result2)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("在函数的重载中，有实现体的函数是不能直接被调用，例如上面的add函数")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("add（）  会报错\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("​")])])])])}),[],!1,null,null,null);n.default=t.exports}}]);